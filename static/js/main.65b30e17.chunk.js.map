{"version":3,"sources":["components/Buttons.js","components/Pages.js","components/TextPages.js","actions/pagesAction.js","containers/App.js","serviceWorker.js","reducers/pages.js","reducers/root.js","store/configureStore.js","index.js"],"names":["Buttons","onButtonClick","e","preventDefault","period","target","value","props","getPeriod","onClick","this","React","Component","Pages","renderTemplate","photos","isFetching","length","map","item","i","src","width","key","alt","TextPages","GET_PHOTOS_REQUEST","GET_PHOTOS_SUCCESS","App","photo","getPhotosAction","className","connect","store","dispatch","type","payload","fetch","then","response","json","data","setTimeout","getPhotos","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","state","action","createStore","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65b30e17.chunk.js","sourcesContent":["import React from 'react';\n\nexport class Buttons extends React.Component {\n    onButtonClick = e => {\n        e.preventDefault();\n        const period = e.target.value;\n        this.props.getPeriod(period);\n    }\n    render() {\n        return (\n            <ul>\n                <li><button onClick={this.onButtonClick} value=\"years\">From years</button></li>\n                <li><button onClick={this.onButtonClick} value=\"months\">From months</button></li>\n                <li><button onClick={this.onButtonClick} value=\"days\">From days</button></li>\n            </ul>\n        );\n    }\n}\n\n","import React from 'react';\n\nexport class Pages extends React.Component {\n    renderTemplate = () => {\n        const { photos, isFetching, period } = this.props;\n\n        if (isFetching){\n            return(\n                <p>Загружаю...</p>\n            )\n        }\n\n        if (!isFetching){\n            if(photos.length !== 0){\n                let srcs = photos[period];\n                 return(\n                     srcs.map((item,i)=>{\n                         return <img src={item} width=\"50%\" key={i} alt={i}/>\n                     })\n                 )\n            }\n        }\n        if (!isFetching && photos.length ==0){\n            return(\n                <p>Нет загруженных фото</p>\n            )\n        }\n\n    }\n    render() {\n        return (\n            <div>\n                <p>Здесь будут по 2 картинки за период.\n                    На данный момент у Вас :</p>\n                {this.renderTemplate()}\n            </div>\n        );\n    }\n}\n\n\n","import React from 'react';\n\nexport class TextPages extends React.Component {\n    renderTemplate = () =>{\n        const { period, photos, isFetching } = this.props;\n\n        if(photos.length ==0){\n            return(\n                <div></div>\n            )\n        }\n        if (photos.length !==0 && !isFetching) {\n            return(\n                <p>Графики за {period} период</p>\n            )\n        }\n    }\n    render() {\n        return (\n            <div>\n                {this.renderTemplate()}\n            </div>\n        );\n    }\n}\n\n\n","export const GET_PHOTOS_REQUEST = 'GET_PHOTOS_REQUEST';\r\nexport const GET_PHOTOS_SUCCESS = 'GET_PHOTOS_SUCCESS';\r\n\r\nexport function getPhotos(period) {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: GET_PHOTOS_REQUEST,\r\n             payload: period\r\n                 })\r\n\r\n        fetch(\"arrPict.json\")//Загрузили json с графиками\r\n            .then(response=>{\r\n                return response.json();\r\n            })\r\n            .then(data=>{\r\n                return data;\r\n            })\r\n            .then(data=>{\r\n               setTimeout(()=>{\r\n                   dispatch({\r\n                       type: GET_PHOTOS_SUCCESS,\r\n                       payload: data\r\n                   })\r\n               },1000)\r\n                }\r\n\r\n            )\r\n    }\r\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../App.css';\nimport  { Buttons }  from '../components/Buttons';\nimport  { Pages }  from '../components/Pages';\nimport  { TextPages }  from '../components/TextPages';\nimport { getPhotos } from '../actions/pagesAction';\n\nclass App extends Component {\n\n    render() {\n      const { photo, getPhotosAction } = this.props;\n    return (\n        <div className=\"App\">\n            <Buttons getPeriod={getPhotosAction}/>\n            <Pages photos={photo.photos}\n                   isFetching={photo.isFetching}\n                   period={photo.period}\n            />\n            <TextPages period={photo.period}\n                       photos={photo.photos}\n                       isFetching={photo.isFetching}\n            />\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = store => {\n    return{\n        photo : store.photo\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        getPhotosAction: period => dispatch(getPhotos(period)),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { GET_PHOTOS_REQUEST, GET_PHOTOS_SUCCESS } from '../actions/pagesAction';\n\nconst initialState = {\n    period: 'years',\n    photos: [],\n    isFetching: false\n}\n\nexport function photosReducer(state = initialState,action) {\n    switch(action.type){\n        case GET_PHOTOS_REQUEST:\n            return {...state, period: action.payload, isFetching: true}\n        case GET_PHOTOS_SUCCESS:\n            return {...state, photos: action.payload, isFetching: false}\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport { photosReducer } from './pages'\n\nexport const rootReducer = combineReducers ({\n    photo: photosReducer,\n})\n","import { createStore, applyMiddleware } from 'redux';\nimport { rootReducer } from '../reducers/root';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './store/configureStore';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}